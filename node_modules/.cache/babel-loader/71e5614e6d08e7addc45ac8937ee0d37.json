{"ast":null,"code":"// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, SystemProgram, Transaction, PublicKey } from \"@solana/web3.js\";\nconst cluster = \"https://api.devnet.solana.com \";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet = new Wallet(\"https://www.sollet.io\", cluster);\nexport async function initWallet() {\n  var _wallet$publicKey;\n\n  await wallet.connect();\n  console.log(\"wallet publicKey\", wallet === null || wallet === void 0 ? void 0 : (_wallet$publicKey = wallet.publicKey) === null || _wallet$publicKey === void 0 ? void 0 : _wallet$publicKey.toBase58());\n  return [connection, wallet];\n}\nexport async function sendMoney(destPubkeyStr, lamports = 500 * 1000000) {\n  try {\n    console.log(\"starting sendMoney\");\n    const destPubkey = new PublicKey(destPubkeyStr);\n    const walletAccountInfo = await connection.getAccountInfo(wallet.publicKey);\n    console.log(\"wallet data size\", walletAccountInfo === null || walletAccountInfo === void 0 ? void 0 : walletAccountInfo.data.length);\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n    console.log(\"receiver data size\", receiverAccountInfo === null || receiverAccountInfo === void 0 ? void 0 : receiverAccountInfo.data.length);\n    const instruction = SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: destPubkey,\n      lamports // about half a SOL\n\n    });\n    let trans = await setWalletTransaction(instruction);\n    let signature = await signAndSendTransaction(wallet, trans);\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\n    console.log(\"money sent\", result);\n  } catch (e) {\n    console.warn(\"Failed\", e);\n  }\n}\nexport async function setWalletTransaction(instruction) {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = wallet.publicKey;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\nexport async function signAndSendTransaction(wallet, transaction) {\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  console.log(\"send raw transaction\");\n  return signature;\n} //export async function","map":{"version":3,"sources":["/Users/shriyatyagi/Desktop/Soulster3/src/helpers/wallet.ts"],"names":["Wallet","Connection","SystemProgram","Transaction","PublicKey","cluster","connection","wallet","initWallet","connect","console","log","publicKey","toBase58","sendMoney","destPubkeyStr","lamports","destPubkey","walletAccountInfo","getAccountInfo","data","length","receiverAccountInfo","instruction","transfer","fromPubkey","toPubkey","trans","setWalletTransaction","signature","signAndSendTransaction","result","confirmTransaction","e","warn","transaction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","signedTrans","signTransaction","sendRawTransaction","serialize"],"mappings":"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","sourcesContent":["// @ts-ignore\n\n\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Connection,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport EventEmitter from \"eventemitter3\";\n\nexport interface WalletAdapter extends EventEmitter {\n  publicKey: PublicKey | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  connect: () => any;\n  disconnect: () => any;\n}\n\nconst cluster = \"https://api.devnet.solana.com \";\nconst connection = new Connection(cluster, \"confirmed\");\nconst wallet: WalletAdapter = new Wallet(\"https://www.sollet.io\", cluster);\n\nexport async function initWallet(): Promise<[Connection, WalletAdapter]> {\n  await wallet.connect();\n  console.log(\"wallet publicKey\", wallet?.publicKey?.toBase58());\n  return [connection, wallet];\n}\n\nexport async function sendMoney(\n  destPubkeyStr: string,\n  lamports: number = 500 * 1000000\n) {\n  try {\n    console.log(\"starting sendMoney\");\n    const destPubkey = new PublicKey(destPubkeyStr);\n    const walletAccountInfo = await connection.getAccountInfo(\n      wallet!.publicKey!\n    );\n    console.log(\"wallet data size\", walletAccountInfo?.data.length);\n\n    const receiverAccountInfo = await connection.getAccountInfo(destPubkey);\n    console.log(\"receiver data size\", receiverAccountInfo?.data.length);\n\n    const instruction = SystemProgram.transfer({\n      fromPubkey: wallet!.publicKey!,\n      toPubkey: destPubkey,\n      lamports, // about half a SOL\n    });\n    let trans = await setWalletTransaction(instruction);\n\n    let signature = await signAndSendTransaction(wallet, trans);\n    let result = await connection.confirmTransaction(signature, \"singleGossip\");\n    console.log(\"money sent\", result);\n  } catch (e) {\n    console.warn(\"Failed\", e);\n  }\n}\n\nexport async function setWalletTransaction(\n  instruction: TransactionInstruction\n): Promise<Transaction> {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = wallet!.publicKey!;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\n\nexport async function signAndSendTransaction(\n  wallet: WalletAdapter,\n  transaction: Transaction\n): Promise<string> {\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize());\n  console.log(\"send raw transaction\");\n  return signature;\n}\n\n//export async function \n"]},"metadata":{},"sourceType":"module"}